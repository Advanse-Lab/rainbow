package org.sa.rainbow.core.models.commands;

import java.util.List;

import org.sa.rainbow.core.error.RainbowException;
import org.sa.rainbow.core.event.IRainbowMessage;
import org.sa.rainbow.core.models.IModelInstance;
import org.sa.rainbow.core.models.ports.IRainbowMessageFactory;

/**
 * This interface represents an executable command. It is generated by a ModelCommandFactory instance. A command has the
 * following state transistion:
 * <ul>
 * <li>canExecute -> execute -> canUndo = true | false & canExecute = false & canRedo = false</li>
 * <li>canUndo -> undo -> canRedo = true | false & canExecute = false & canUndo = false</li>
 * <li>canRedo -> redo -> canUndo = true | false & canExecute = false & canRedo = false</li>
 * </ul>
 * On executing the command, the model that the command runs on and the way of generating messages is fixed.
 * 
 * @author Bradley Schmerl: schmerl
 * 
 * @param <Type>
 *            The type that the command can (optionally) return
 * @param <Model>
 *            The kind of model that the command works on
 */
public interface IRainbowModelCommand<Type, Model> extends IRainbowModelCommandRepresentation {

    /**
     * Executes a command on a particular model. Unless an exception occurs, the model will be updated in which case a
     * list of messages (events) describing the actual changes is made
     * 
     * @param context
     *            The model on which the command is executed. Once the context is set, it cannot be changed.
     * @param messageFactory
     *            The factory through which commands are created, for describing updates to the model
     * @return The list of events generated by executing the command
     * @throws IllegalStateException
     *             Is thrown if the command is not executable
     * @throws RainbowException
     *             Is thrown is there is an error in updating the model
     */
    public List<? extends IRainbowMessage>
    execute (IModelInstance<Model> context, IRainbowMessageFactory messageFactory)
            throws IllegalStateException, RainbowException;

    /**
     * Redoes a command on the context (that was defined by execute). Can only be redone if the command has been undone
     * 
     * @return The list of events generated by redoing the command
     * @throws IllegalStateException
     *             Thrown if the command is not redoable (i.e., has not been undone)
     * @throws RainbowException
     *             Is thrown if there is an error when redoing the command
     */
    public List<? extends IRainbowMessage> redo () throws IllegalStateException, RainbowException;

    /**
     * Undoes a command on the context (that was defined by execute). The command can only be undone if it has been
     * executed or redone.
     * 
     * @return The list of events generated by redoing the command
     * @throws IllegalStateException
     *             Thrown if the command is not undoable (i.e., has not been executed or redone)
     * @throws RainbowException
     *             Is thrown if there is an error when undoing the command
     */
    public List<? extends IRainbowMessage> undo () throws IllegalStateException, RainbowException;

    /**
     * 
     * @return whether the command is executable
     */
    public boolean canExecute ();

    /**
     * 
     * @return whether the command is undoable
     */
    public boolean canUndo ();

    /**
     * 
     * @return whether the command is redoable
     */
    public boolean canRedo ();

    /**
     * Can be used to get the result of the command.
     * 
     * @return
     * @throws IllegalStateException
     *             if the command has not been executed
     */
    public Type getResult () throws IllegalStateException;

}
