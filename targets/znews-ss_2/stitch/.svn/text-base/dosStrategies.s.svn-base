/*
 * Adaptation script for security attacks
 */
 
module dos.strategies;
import op "org.sa.rainbow.stitch.lib.*";
import lib "dosTactics.s";

//define boolean styleApplies = Model.hasType(M, "ClientT") && Model.hasType(M, "ServerT");

// The style applies if there is an attacker present and they are not in the black hole
define boolean cUnderAttack = exists c : D.PotentiallyMaliciousT in M.components | ((c.maliciousness > M.MALICIOUS_THRESHOLD) && !(exists b:D.BlackholerT in M.components | M.contains (c.deploymentLocation, b.blackholed)));
define boolean cUnfairlyPenalizedClients = !(forall lb : D.BlackholerT in M.components | forall ip : string in lb.blackholed | forall c : D.PotentiallyMaliciousT in M.components | ((c.deploymentLocation == ip) -> (c.maliciousness > M.MALICIOUS_THRESHOLD)));

// Non-malicious clients are suffering high response times 
//define boolean cHiRespTime = exists c : T.ClientT in M.components | (c.experRespTime > M.MAX_RESPTIME && c.maliciousness <= M.MALICIOUS_THRESHOLD);

// There is atleast one reserve server available
define boolean serversAvailable = Model.availableServices(T.ServerT) > 0;
	
/* Stop the attack by placing attackers into a blackhole.  This strategy is triggered
 * by the presence of an attacker and an impact on response time
 */
strategy StopAttackStrategy
[ cUnderAttack /*&& styleApplies && cUnderAttack && cHiRespTime*/] {
  t0: (/* under attack */ cUnderAttack) -> blackholeAttacker() @[2000 /*ms*/] { 
      t1: (!cUnderAttack) -> done;	
      t1a: (default) -> TNULL;  // in this case, we have no more steps to take
  }
}

strategy RestoreClientsStrategy
[cUnfairlyPenalizedClients] {
  t0: (cUnfairlyPenalizedClients) -> unblackholeAttacker () @[2000 /*ms*/] {
    t1 : (!cUnfairlyPenalizedClients) -> done;
    t1a: (default) -> TNULL;
  }
}


/* This strategy allocates more capacity to counter the impact of a DoS attack. 
 */
//strategy IncreaseCapacityStrategy
//[ styleApplies && cHiRespTime && serversAvailable] {
//  t0: (/* under attack */ cHiRespTime) -> enlistServer(1) @[1000 /*ms*/] {
//      t1: (!cHiRespTime) -> done;	
//      t1a: (default) -> TNULL;  // in this case, we have no more steps to take
//  }
//}


