module dos.strategies;
	
import model "ZNewsSys.acme" { ZNewsSys as M, ZNewsFam as T, DoSFam as D } ;
import op "znews_ss.operator.EffectOp" { EffectOp as Sys } ;

//--------------------------------------------------------------------------------------------------
// ! exists c : ClientT in self.components | (c.isMalicious and !c.is_blackholed)
//
// Failing this would cause the strategy to fire
// In the long run, isMalicious could be a float that captures the probability 
// that a client is malicious -- in this case, we would have a threshold value
//	
// Countermeasure #3: Black Hole the attacker(s)
// Blackholing means replying with ICMP giving reason for Black hole the attacking
// client by redirecting connections from a client 
// for some period of time (i.e. black hole the traffic).
// 
tactic blackholeAttacker () {
 condition { 
   exists c:D.PotentiallyMaliciousT in M.components | ((c.maliciousness > M.MALICIOUS_THRESHOLD) && !(exists b:D.BlackholerT in M.components | M.contains(c.deploymentLocation, b.blackholed)));
   
   // currently just checking if the client is identified as malicious.
   // exists c:D.PotentiallyMaliciousT in M.components | c.maliciousness > M.MALICIOUS_THRESHOLD;
 }
 action { 
  // Find the attacker. Currently, this is done by checking if client is identified as an attacker
  // the blackHole() routine re-routes all traffic from a client away from the backed servers
  // thereby preventing attackers from consuming ZNN resources.
  //
  set evilClients = { select c : D.PotentiallyMaliciousT in M.components | c.maliciousness > M.MALICIOUS_THRESHOLD};  
  for (T.ClientT target : evilClients) {
    Sys.blackhole(M.LB0, target.deploymentLocation); // black hole the malicious attacker 
  }
 }
 effect { 
  // all the clients that were malicious are now blackholed. Perhaps the "and" is too strong here?
  // Do we want to have clients blackholed that are not malicious? This isBlackHoled() routuine returns true
  // if the client is blackholed and false otherwise
  forall c:D.PotentiallyMaliciousT in M.components | ((c.maliciousness > M.MALICIOUS_THRESHOLD) -> (exists b:D.BlackholerT in M.components | M.contains (c.deploymentLocation,b.blackholed)));
  //forall c:T.ClientT in M.components | (c.maliciousness > M.MALICIOUS_THRESHOLD) -> !c.isBlackholed));
 }
}

tactic unblackholeAttacker () {
  condition {
     exists c:D.PotentiallyMaliciousT in M.components | exists l:D.BlackholerT in M.components | (M.contains(c.deploymentLocation, l.blackholed) && c.maliciousness <= M.MALICIOUS_THRESHOLD);
  }
  action {
  	set reformedClients = {select c : D.PotentiallyMaliciousT in M.components | c.maliciousness <= M.MALICIOUS_THRESHOLD};
  	set lbs = {select l : D.BlackholerT in M.components | M.size (l.blackholed) > 0};
  	for (D.BlackholerT l : lbs) {
  		for (D.PotentiallyMaliciousT c : reformedClients) {
  		    // Curiously, if the unblackhole is only in the op.map and
  		    // not in the the EffectOp class, then the parameters need
  		    // to be paired with their parameter name
  		    // Thus, (...,"client", c.deploymentLocation) here
  		    // compared to blackhole above, which is actually
  		    // a method provided in the EffectOp class
  			Sys.unblackhole (l, "client", c.deploymentLocation);
  		}
  	}
  }
  effect {
  	forall lb : D.BlackholerT in M.components | forall ip : string in lb.blackholed | forall c : D.PotentiallyMaliciousT in M.components | ((c.deploymentLocation == ip) -> (c.maliciousness > M.MALICIOUS_THRESHOLD));
  }
}
  
