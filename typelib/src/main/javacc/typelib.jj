options {
	STATIC = false;
}

PARSER_BEGIN(TypelibParser)

package edu.cmu.cs.able.typelib.parser;

public class TypelibParser {
}

PARSER_END(TypelibParser)

SKIP : {
	< ("\n" | "\r" | "\t" | " ") >
}

TOKEN : {
	< ABSTRACT: "abstract" >
|	< ENUMERATION: "enum" >
|	< NAMESPACE: "namespace" >
|	< STRUCT: "struct" >
|	< CCOLON: "::" >
|	< COLON: ":" >
|	< COMMA: "," >
| 	< IDENTIFIER: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
|	< QIDENTIFIER: <IDENTIFIER>(<CCOLON><IDENTIFIER>)* >
}

TypelibBlockDeclaration TypelibBlock() : {
		StructureDeclaration sdel;
		EnumerationDeclaration edel;
		Token ns;	} {
		sdel = Structure() {
			return new TypelibBlockDeclaration(sdel);			}
		| edel = Enumeration() {
			return new TypelibBlockDeclaration(edel);			}
		| <NAMESPACE> ns = <IDENTIFIER> {			return new TypelibBlockDeclaration(ns.image);
			}}

StructureDeclaration Structure() : {
		StructureDeclaration dec;
		Token t;
		String p;
		boolean abs = false;	} {
		(<ABSTRACT> {
			abs = true;			}		)? <STRUCT> t = <IDENTIFIER> {
			dec = new StructureDeclaration(t.image);
			if (abs) {
				dec.make_abstract();				}
			}
		(<COLON> p = ParentName() {
			dec.add_parent(p);			}
		(<COMMA> p = ParentName() {			dec.add_parent(p);
			}
		)*)? <EOF> {
			return dec;			}}

String ParentName() : {
		Token t;
	} {
		t = <IDENTIFIER> {
			return t.image;			}
		| t = <QIDENTIFIER> {			return t.image;
			}
}

EnumerationDeclaration Enumeration() : {
		Token t;
	} {
		<ENUMERATION> t = <IDENTIFIER> {
			return new EnumerationDeclaration(t.image);			}
}